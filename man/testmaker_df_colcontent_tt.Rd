% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/testmaker_df_colcontents.R
\name{testmaker_df_colcontent_tt}
\alias{testmaker_df_colcontent_tt}
\title{Generate \code{testthat} code to check contents of column(s) against template}
\usage{
testmaker_df_colcontent_tt(
  x,
  cols,
  return.style = c("clip", "text", "none"),
  silent = FALSE
)
}
\arguments{
\item{x}{Template dataframe of target object (e.g. we expect our test object to share properties with this)}

\item{cols}{character or character vector of columns in \code{x}.}

\item{return.style}{Designation for what to return. "clip" returns nothing, but loads the text into the clipboard.
"text" returns the text as a character vector, "none" returns nothing}

\item{silent}{Suppress printing text to console? logical; default of false.}
}
\value{
Either nothing or a character vector of lines of R code for writing a testthat test, depending on \code{return.style}.
}
\description{
Useful for QA/QC when (a) all entries of a column should fall within a contained set (e.g. fishery columns in FRAM model outputs or manipulations
should only contain fishery IDs present in the FRAM database), and/or (b) when all entries of some template column should present in the output template (e.g.,
if processing of a FRAM model table should result in a dataframe with all fishery ids present in the
FRAM database). For example, in the \code{framrsquared} package, we may have functions in which we expect
the \code{fishery_id} column of the function output to contain only fishery_ids present in the FRAM database. Similarly,
we may expect that the output \code{fishery_id} column contains ALL of the fishery_ids present in the FRAM database.
}
\details{
Depending on the number of unique variables in the column(s), this can generate very long code. This function includes comments to
distinguish between checking against unexpected entries and checking against missing entries.
}
\examples{
dat = data.frame(state.x77, state = rownames(state.x77))
dat$category = sample(letters[1:5], size = nrow(dat), replace = TRUE)
testmaker_df_colcontent_tt(dat, c("state", "category"), return.style = "none")
}
